---
pagetitle: "Introducción al lenguaje R"
subtitle: "Unidad 1"
format: 
  revealjs:
    auto-stretch: false
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, custom.scss]
    logo: INE.gif
    footer: "Instituto Nacional de Epidemiología"
editor: source
---

```{r setup, include=F}
library(quarto)
library(fontawesome)
library(tidyverse)
```

##  {#intro-curso data-menu-title="Introducción al lenguaje R" .invert}


[**Introducción al lenguaje R**]{.custom-title} 

[***Unidad 1***]{.custom-subtitle}


## Introducción al lenguaje R aplicado a sistemas y servicios de salud {.title-top}

![](images/tablas.jpg){.absolute top="300" left="1050" width="650"}

<br>

> Unidad 1: Instalación e introducción al lenguaje R

. . .

> Unidad 2: Procesamiento de datos

. . .

> Unidad 3: Exploración, diagnóstico y limpieza de datos

. . .

> Unidad 4: Tratamiento de datos específicos

. . .

> Unidad 5: Estadísticos, operaciones múltiples y resúmenes

. . .

> Unidad 6: Visualización de datos 

. . .

> Unidad 7: Control de flujo y funciones

. . .

> Unidad 8: Comunicar con Quarto


## Esquema de trabajo {.title-top}

<br>

. . .

-   Los jueves comenzamos un nuevo tema en el aula virtual con material teórico-práctico, recursos extras, enlaces, bibliografía complementaria y el encuentro sincrónico de la unidad de 10 a 12 hs.

. . .

-   Los viernes tendremos los encuentros sincrónicos prácticos de 9 a 11 hs.

. . .

-   Las unidades coinciden con las semanas y tendran una práctica para desarrollar. Al finalizar las unidades tendrán que resolver un trabajo práctico integrador.

. . .

<br>

::: callout-warning
## Importante

El sincrónico del jueves 1 de mayo, al ser feriado, será grabado previamente y subido al aula virtual.
:::

## Trabajos prácticos {.title-top}

<br>

-   Cada unidad tiene su trabajo práctico.

-   Es importante que lo intenten hacer y utilicen el foro para consultar las dudas y problemas.

-   Al finalizar cada unidad se subirá una resolución al aula virtual.

-   El trabajo practico integrador se inicia con la unidad 8 y se entrega el 6/6/2025.

<br>

::: callout-note
## Nota

Estas fechas pueden sufrir cambios como resultado del desarrollo de la cursada.
:::

## Lenguaje R {.title-top}

![](images/R.png){.absolute top="10" left="1600" width="300"}

<br>

El [sitio oficial](https://www.r-project.org/) del lenguaje dice que:

_**“R es un entorno de software libre para gráficos y computación estadística.**_ 

_**Se compila y se ejecuta en una amplia variedad de plataformas UNIX, Windows y MacOS.”**_

. . . 

<br>

Profundizando en su descripción podemos decir, más técnicamente, que:

> es un lenguaje de programación interpretado, orientado a objetos, multiplataforma y open source pensado para el manejo de datos estadísticos.

## Por lo tanto ![](images/R.png){width="8%"} ... 

. . . 

**...es un lenguaje de programación estadístico**

Básicamente es un lenguaje de programación, con sus estructuras y reglas de sintaxis, que posee una gran variedad de funciones desarrolladas para estadística y otras librerías con diversas aplicaciones.

. . .

**...es un lenguaje Orientado a Objetos**


Implementa los conceptos de la programación orientada a objetos y esto le otorga simpleza y flexibilidad en el manejo de datos. 

. . .

**...es un lenguaje interpretado**

No es necesario compilar el código para construir ejecutables sino que directamente se ejecuta por medio del intérprete que el software instala.

. . . 

**...es multiplataforma**


Se puede instalar en diferentes sistemas operativos como Linux, Windows y Mac. 

. . . 

**...es Open Source y se distribuye bajo licencia GNU - GPL**

Se distribuye gratuitamente bajo [licencia GNU](https://es.wikipedia.org/wiki/GNU_General_Public_License) (General Public License) -- GPL y que los usuarios tienen la libertad de usar, estudiar, compartir (copiar) y modificar el software.

## Historia {.title-top}

<br>

:::: {.columns}

::: {.column width="70%"}

R es un lenguaje que fue desarrollado a partir del [***lenguaje S***](https://en.wikipedia.org/wiki/S_(programming_language)) que a su vez tiene sus orígenes en [Bell Labs](https://en.wikipedia.org/wiki/Bell_Labs) de la **AT&T** (actualmente Lucent Technologies) de mediados de la década del '70. Posteriormente, S fue vendido y dio origen a una versión propietaria denominada S-Plus que es comercializada por Insighful Corporation.

<br>

En 1995 dos profesores de estadística de la *Universidad de Auckland*, en Nueva Zelanda ([Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) y [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)), iniciaron el **"Proyecto R"**, con la intención de desarrollar un programa estadístico inspirado en el lenguaje S pero de dominio público.

:::

::: {.column width="30%"}

<br>


![](images/creadores_R.jpg){width="100%"}
:::

::::

## Funcionamiento {.title-top}

<br>

![](images/funcionamiento.jpg){width="85%" fig-align="center"}


## Usuarios del lenguaje y enfoque "comunicativo" {.title-top}

<br>

- Plantea abordar el lenguaje R como un lenguaje para **_"comunicarse"_** (similar a un segundo lenguaje como el inglés, francés, etc.)

- Al dotar a R de una estructura particular **_semántica_**, **_gramatical_** y **_sintáctica_**.

- Se busca comenzar a **_"decir cosas con datos"_** y luego profundizar en las estructuras del lenguaje.

- Diferencias entre ser **_"usuario"_** y **_"programador"_** 

- Propuesto por *Riva Quiroga* de LatinR en el encuentro global de RStudio de 2021. Para profundizar ver ponencia *“How to do things with words: Learning to program with a ‘communicative approach’"* en [rstudio::global(2021)](https://rstudio.com/resources/rstudioglobal-2021/how-to-do-things-with-words-learning-to-program-in-r-with-a-communicative-approach/)

## R es un lenguaje de funciones (y argumentos) {.title-top}

<br>

Una función es un bloque de código que sólo se ejecuta cuando se llama.

- Existen funciones que forman parte de la base del lenguaje y otras que estan empaquetadas en librerías.

- Todas las funciones devuelven algo. Datos, un resultado o una acción determinada.

- La mayoría necesitan de ciertos datos que se declaran dentro de la función denominados **argumentos**. Algunos son obligatorios y otros opcionales.

```{r, eval=FALSE}
# Estructura sintáctica de una función

funcion(argumento1, argumento2, ...)
```

- Toda función se escribe con una sintaxis precisa y finaliza siempre con paréntesis. Los argumentos se separan por comas. 


## Paquetes de R {.title-top}

<br>


:::: {.columns}

::: {.column width="80%"}

- **Paquete** es sinónimo de *librería* y contiene una serie de funciones y/o datos con su documentación.

- El conjunto base de R tiene varias funciones fundamentales contenidas en algunos paquetes (base, stats, utils, graphics, methods, etc)

- Los paquetes se instalan, activan y desactivan. El sitio oficial donde se publican se encuentra en [CRAN - packages](https://cran.r-project.org/web/packages/available_packages_by_name.html)

- Visto como un lenguaje (idioma) los paquetes vendrían a ser conjuntos de palabras que *"agregamos"* a nuestro vocabulario para poder *"comunicarnos"* mejor o más fácilmente con el interprete de R.

:::

::: {.column width="20%"}

![](images/baseR.PNG){width="100%" fig-align="center"}

:::

::::

##

![](images/baseR2.PNG){width="100%" fig-align="center"}

##

![](images/paquetes.PNG){width="100%" fig-align="center"}


## 

![](images/RStudio.png){.absolute top="0" left="0" width="400"}

<br>

<br> <br> <br>

::: {.fragment .fade-in-then-semi-out}

-   IDE - Entorno de Desarrollo Integrado

:::

::: {.fragment .fade-in-then-semi-out}

-   Paneles

:::

::: {.fragment .fade-in-then-semi-out}

-   Proyectos

:::

::: {.fragment .fade-in-then-semi-out}

-   Scripts

:::

::: {.fragment .fade-in-then-semi-out}

-   Herramientas de edición

:::

::: {.fragment .fade-in-then-semi-out}

-   Gestión de paquetes

:::

## Tidyverse {.title-top}

![](images/hex-tidyverse.png){.absolute top="10" left="1700" width="150"}


<br> <br> <br>

Una colección de paquetes de R modernos, que comparten una **gramática** y filosofía común, diseñados para resolver los desafíos de la ciencia de datos.

<br>

![](images/tidyverse2.PNG){fig-align="center" width=35%}

## Fundamentos {.title-top}

![](images/tidy.PNG){fig-align="center" width=40%}



- **Estructura ordenada de datos (tidy)**

  - Cada _variable_ es una _columna_ de la tabla de datos
  
  - Cada _observación_ es una _fila_ de la tabla de datos
  
  - Cada _tabla_ responde a una _unidad observacional_

- **Principios básicos** 

  - Reutilizar las estructuras de datos mediante el uso de tuberías
  
  - Resolver problemas complejos combinando varias piezas sencillas
  
  - Diseño para humanos incorporando una gramática específica al lenguaje (*que ya posee una sintaxis estricta y una semantica que le otorga significado*)


## 

![](images/cd.PNG){fig-align="center" width=100%}

##

![](images/paquetes_tidy.PNG){fig-align="center" width=100%}

## Tuberías {.title-top}

<br>

Las tuberías son operadores que permiten *"canalizar"* un objeto hacia una función o llamar a una expresión, lo que le permite expresar una secuencia de operaciones que transforman un objeto.

<br>

Existen dos tuberías conocidas: 

`%>%` perteneciente al paquete **magrittr** del tidyverse 

`|>` que es la propuesta **nativa** de R base a partir de la versión 4.1.0

La mayoría de los scripts del curso muestran la tubería nativa, pero se puede utilizar cualquiera de las dos.

## Tuberías {.title-top}

<br>

![](images/pipe.png){width=40% fig-align="center"}


Para el uso general, la utilización de las dos tuberías es la misma, es decir que la forma simple de las tuberías inserta el lado izquierdo como primer argumento en la llamada del lado derecho. 

Esto posibilita la reutilización de las estructuras de datos y la escritura de porciones de código similares a *"oraciones"* de un párrafo.

Pulse [aquí](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) para ver algunas caracteristicas comparativas de estas tuberías.


## Estructura de datos {.title-top}

<br>

![](images/vector_dataframe.png){fig-align="center" width=50%}

Las estructuras de datos son los **objetos** **_contenedores de datos_** que el lenguaje ofrece.

Existe una variedad de estructuras de datos: vectores, matrices, arrays, dataframes, listas, etc.

Vamos a describir a las más relevantes dentro del ecosistema tidyverse y que serviran en estos inicios del curso: Los **vectores** y los **dataframes**.


## Vectores {.title-top}

<br>

- Son secuencias de elementos del mismo tipo de datos.

- Tienen dos atributos principales: longitud y tipo de datos.

- Los 6 tipos de datos que usaremos en R son:

  1. logical (`TRUE` - `FALSE`)
  2. integer (`15`)
  3. double (`24.64`)    
  4. character (`"Hola"`)
  5. factors (`"Si"` - `"No"` - `"Ns/Nc"`)
  6. date/datetime (`"2023-10-09"` - `"2023-10-09 01:00:00"`)
  
- Los vectores integer y double se conocen como vectores numéricos (numeric).


## Dataframes {.title-top}

<br>

:::: {.columns}

::: {.column width="60%"}

- Un dataframe, que se traduce como *marco de datos*, es similar a una tabla de datos construida por una colección de vectores ubicados verticalmente que mantienen la integridad de sus filas.

- Tienen dos dimensiones, las columnas verticales llamadas **variables** y las filas horizontales llamadas **observaciones**.

- Las columnas pueden ser de diferentes tipos, pero todas las filas de cada columna pueden tener un mismo tipo de dato.

- La combinación de datos de las diferentes columnas que conforman una fila es fija, por lo que se asegura la integridad de estas observaciones (principio de las bases de datos).

:::

::: {.column width="40%"}

<br>


![](images/dataframe.PNG){width="100%"}

:::

::::

## Tibbles {.title-top}

<br>

:::: {.columns}

::: {.column width="60%"}

- Los tibbles son una versión moderna del dataframe que introduce **tidyverse**.

- Tienen las mismas características que un dataframe normal con algunos atributos más agradables.

- Cuando importemos tablas de datos, estos se almacenarán como dataframes/tibbles.

- Dado que estamos centrados en tidyverse, utilizaremos los términos dataframe y tibble como sinónimos entre sí para su uso general.

- Los dataframes/tibbles son el tipo de datos fundamental en la mayoría de los análisis que llevaremos adelante.

:::

::: {.column width="40%"}

![](images/tibble.PNG){width="100%"}

:::

::::

## Archivos de datos {.title-top}

<br>

- El formato de archivos de datos estándar y universal es el **texto plano separado por comas** (archivos `csv`)

- Se pueden importar otros formatos comunes como `.xlsx`, o específicos provenientes de Stata, SPSS, y otros softwares de análisis a partir de paquetes que integran el tidyverse.

- Estas tablas de datos tienen las **variables** ubicadas en las *columnas* y las **observaciones** en las *filas*.

- El objeto al que asignemos la importación de estos archivos siempre será un **dataframe/tibble**.

- Otro formato de datos propio de R es `.RData`, que permite guardar varios objetos del lenguaje (vectores, dataframes, etc.) simultáneamente. Es como almacenar el entorno de trabajo completo.

## Errores y advertencias {.title-top}

![](images/errores_advertencias.PNG){width="70%" fig-align="center"}


## Ayuda {.title-top}

<br>

- Todas las funciones del R base o de los paquetes vienen acompañadas con su respectiva **documentación**.

- Esta documentación se puede visualizar en el panel **Help** de RStudio navegando como si fuese un navegador web.

- La documentación tiene una estructura que se repite: descripción, uso, argumentos, detalles, valores, ejemplos.

- También se pueden hacer busquedas en buscadores web como Google, foros especializados, como por ejemplo **Stack Overflow** o **Rpubs**, canales de **slack** y más recientemente en IAs como **chatGPT** o **Google Gemini**.

## Importar y exportar archivos de datos {.title-top}

<br>

- En el mundo informático existen numerosos formatos de archivos de tablas / base de datos.

- El lenguaje R permite importar y exportar de una amplia variedad de formatos a partir de utilizar diferentes paquetes. Muchos de ellos pertenecientes al ecosistema **tidyverse**.

- Hoy nos vamos a centrar en dos formatos básicos habituales donde tenemos almacenada comúnmente la información:
  - Archivos **texto plano separados por comas** u otro caracter (extensiones .csv, .txt, etc)
  - Archivos con formato **Excel** (.xls y .xlsx)

- Además mencionaremos otros formatos posibles y el propio de R

## Paquete readr {.title-top}

![](images/readr.png){fig-align="center" width="15%"}

El paquete **readr** se instala y activa cuando ejecutamos `library(tidyverse)`.

- Contiene una familia de funciones que permiten leer y escribir archivos de texto plano separados como coma o algún otro caracter (tabulación, punto y coma, etc)

- Sus funciones de lectura comienzan todas con **read_**

- Sus funciones de escritura comienzan con **write_**

<br>

## Lectura con funciones de readr {.title-top}

<br>

La primera función de lectura que vamos a presentar es `read_delim()`

El estructura de esta función sirve de base para las demás.

Sus principales argumentos son:

- **file**: nombre del archivo

- **delim**: caracter separador de columna

- **col_names**: Valor lógico. Si es *TRUE* lee la primera fila como nombres de las variables. Si es *FALSE* no lo hace.

- **skip**: número de líneas que saltea para comenzar a leer.

## Lectura con funciones de readr {.title-top}

<br>

La función tiene numerosos argumentos que nos permite controlar eficazmente la lectura, como vemos debajo, pero se suelen modificar pocos de ellos en la mayoría de las situaciones.

```{r}
#| echo: true

args(readr::read_delim)

```


## Lectura con funciones de readr {.title-top}

<br>

Para archivos separados por comas en formato regional Estadounidense se utiliza la función `read_csv()`.

Tiene la misma base de `read_delim()` pero asume:

- que el caracter delimitador es la `coma` ","
- que el caracter separador de coma decimal es el `punto` "."

```{r}
#| echo: true
#| eval: false

read_csv(file = "datos.csv")
```

## Lectura con funciones de readr {.title-top}

<br>

Para archivos separados por comas en formato regional Español/Argentino se utiliza la función `read_csv2()`.

Tiene la misma base de `read_delim()` pero asume:

- que el caracter delimitador es el `punto y coma` ";"
- que el caracter separador de coma decimal es la `coma` ","

```{r}
#| echo: true
#| eval: false

read_csv2(file = "datos.csv")
```

## Lectura de múltiples archivos {.title-top}

<br>

En ocasiones trabajamos con múltiples archivos que tienen una misma estructura interna, por ejemplo provenientes de proyectos longitudinales de vigilancia epidemiológica. Supongamos que tenemos el caso de vigilancia de una enfermedad donde se produce un archivo por mes, tipo `01_SUH.csv`, `02_SUH.csv`, `03_SUH.csv`, etc hasta el mes 12.

Podemos almacenar los nombre de los archivos en un vector y luego leerlos todos juntos, incorporando la identificación del archivo.

```{r}
#| eval: false
#| echo: true


archivos_SUH <- c("datos/01-SUH.csv", "datos/02-SUH.csv", "datos/03-SUH.csv")
read_csv(archivos_SUH, id = "archivo")

#>   archivo           mes     anio   ID    edad  
#>   <chr>             <chr>   <dbl>  <dbl> <dbl>
#> 1 datos/01-SUH.csv Enero  2019     1234     3
#> 2 datos/01-SUH.csv Enero  2019     8721     9
#> 3 datos/01-SUH.csv Enero  2019     1822     2
```


## Herramienta de lectura de RStudio {.title-top}

<br>

![](images/Import.PNG){fig-align="center" width=80%}


## Paquete readxl {.title-top}

![](images/readxl.png){fig-align="center"  width=15%}

El paquete **readxl** se instala con tidyverse pero hay que activarlo aparte mediante `library(readxl)`.

- Contiene funciones que permiten leer archivos de Microsoft Excel tan extendidos en nuestro trabajo cotidiano.

- La función comodín para leer, tanto formatos .xls como .xlsx, es `read_excel()`

<br>

## Lectura con funciones de readxl {.title-top}

<br>

La estructura de los argumentos de la función `read_excel()` es:


- **path**: nombre del archivo

- **sheet**: hoja del libro del archivo Excel

- **range**: rango de celdas (opcional)

- **col_names**: Valor lógico. Si es *TRUE* lee la primera fila como nombres de las variables. Si es *FALSE* no lo hace.

- **skip**: número de líneas que saltea para comenzar a leer.

## Paquete haven {.title-top}

![](images/haven.png){width=15% fig-align="center"}

Este paquete permite la importación de archivos provenientes de paquetes estadísticos como SPSS (.sav), Stata (.dta) y SAS (.sas7bdat) y también su exporatción.

- Sus funciones principales son `read_spss()`, `read_por()`, `read_stata()`, `read_dta()`, `read_sas()`  

- Las funciones de exportación comienzan con el prefijo `write_`

- Utiliza la librería ReadStat hecha en lenguaje C por Evan Miller.

- Tiene algunas limitaciones dependiendo de las versiones de los softwares.


## Formato nativo R {.title-top}

<br>

El propio lenguaje R tiene un formato nativo de almacenamiento del entorno de trabajo produciendo archivos con extención `.RData`.

Las funciones, pertenecientes a R base, para guardar y leer los `.RData` son:

- `save()`: almacena el contenido del entorno de trabajo, pudiendo seleccionar cual o cuales objetos deseamos guardar.

- `load()`: lee archivos `.RData` y su contenido (sea este uno o varios objetos)

Cabe aclarar que cuando nos referimos a objetos estamos hablando de cualquier estructura de datos como dataframes, vectores, matrices, etc y también funciones propias. 

## Documentación {.invert}

<br>

![](images/r4ds2.png){fig-align="center"}

::: {.centered}

Capítulo 7 del libro ["R for Data Science (2e)"](https://r4ds.hadley.nz/data-import)

:::